/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package cs349.a3;

import java.awt.Graphics;
import java.awt.Polygon;
import java.awt.Rectangle;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.JSlider;
import javax.swing.Timer;

/**
 *
 * @author sandy
 */
public class Canvas extends javax.swing.JPanel {
    public Animation animation = new Animation();
    public View view = new View(animation);
    
    int startX, startY, lastX, lastY;
    
    Timer recordTimer = new Timer(1000 / 24, new ActionListener() {
        public void actionPerformed(ActionEvent evt) {
            animation.currentActor.moveTo(animation.currentFrame, animation.currentActor.position);
            animation.currentFrame++;
            if (animation.currentFrame > slider.getMaximum()) {
                slider.setMaximum(animation.currentFrame);
            }
            
            slider.setValue(animation.currentFrame);
            slider.validate();
        }
    });
    
    public JSlider slider;
            
    /**
     * Creates new form Canvas
     */
    public Canvas() {
        initComponents();
    }
    
    public void setMode(Animation.Mode m) {
        animation.mode = m;
    }
    
    public void finishSelect() {
        Rectangle r = null;
        Polygon p = null;
        if (animation.mode == Animation.Mode.SELECT) {
            int x0 = Math.min(startX, lastX), x1 = Math.max(startX, lastX);
            int y0 = Math.min(startY, lastY), y1 = Math.max(startY, lastY);
            animation.finishSelect(new Rectangle(x0, y0, x1 - x0, y1 - y0));
        } else if (animation.mode == Animation.Mode.LASSO) {
            int xs[] = new int[animation.activeDoodle.lines.size()];
            int ys[] = new int[animation.activeDoodle.lines.size()];
            
            int i = 0;
            for (Line l : animation.activeDoodle.lines) {
                xs[i] = (int)l.source.x;
                ys[i] = (int)l.source.y;
                ++i;
            }
            
            p = new Polygon(xs, ys, xs.length);
            animation.activeDoodle = new Doodle();
            animation.activeDoodle.firstFrame = animation.currentFrame;
            animation.finishSelect(p);
        }
    }
    
    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        view.paint(g, getWidth(), getHeight());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                formMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                formMouseReleased(evt);
            }
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });
        addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                formMouseDragged(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 800, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 600, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    
    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        if (animation.mode == Animation.Mode.SELECT) {
            for (Actor actor : animation.actors) {
                if (actor.hitTest(animation.currentFrame, new Vector2D(evt.getX(), evt.getY()))) {
                    animation.currentActor = actor;
                    break;
                }
            }
        }
    }//GEN-LAST:event_formMouseClicked

    private void formMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseDragged
        if (animation.mode == Animation.Mode.DRAW || animation.mode == Animation.Mode.LASSO) {
            animation.activeDoodle.append(new Line(0, startX, startY, evt.getX(), evt.getY()));
            startX = evt.getX();
            startY = evt.getY();
        } else if (animation.mode == Animation.Mode.SELECT) {
            lastX = evt.getX();
            lastY = evt.getY();
        } else if (animation.mode == Animation.Mode.ANIMATE && animation.currentActor != null) {
            animation.currentActor.position = new Vector2D(evt.getX(), evt.getY()).minus(animation.currentActor.origin);
        } else if (animation.mode == Animation.Mode.ERASE) {
            Line line = new Line(0, startX, startY, evt.getX(), evt.getY());
            
            for (Doodle doodle : animation.doodles) {
                doodle.erase(animation.currentFrame, line);
            }
            
            for (Actor actor : animation.actors) {
                actor.erase(animation.currentFrame, line);
            }
            
            startX = evt.getX();
            startY = evt.getY();
        }
        
        repaint();
    }//GEN-LAST:event_formMouseDragged

    private void formMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMousePressed
        startX = evt.getX();
        startY = evt.getY();
        
        if (animation.mode != Animation.Mode.ANIMATE) {
            animation.clearNewActor();
        } else {
            if (animation.currentActor != null) {
                if (!animation.currentActor.committed) {
                    animation.currentActor.commit(animation.currentFrame);
                }
                
                animation.currentActor.record(true, animation.currentFrame);
                recordTimer.start();
            }
        }
        
        if (animation.mode == Animation.Mode.DRAW || animation.mode == Animation.Mode.LASSO) {
            animation.activeDoodle = new Doodle();
            animation.activeDoodle.firstFrame = animation.currentFrame;
            
            if (animation.mode == Animation.Mode.DRAW) {
                animation.doodles.add(animation.activeDoodle);
            }
        }
    }//GEN-LAST:event_formMousePressed

    private void formMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseReleased
        if (animation.mode == Animation.Mode.SELECT || animation.mode == Animation.Mode.LASSO) {
           
            lastX = evt.getX();
            lastY = evt.getY();
            
            if (animation.currentActor == null)
            {
                finishSelect();
            }
            
            startX = startY = lastX = lastY = 0;
            
            repaint();
        }
        
        if (animation.mode == Animation.Mode.ANIMATE) {
            recordTimer.stop();
            animation.currentActor.record(false, animation.currentFrame);
        }
    }//GEN-LAST:event_formMouseReleased
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
